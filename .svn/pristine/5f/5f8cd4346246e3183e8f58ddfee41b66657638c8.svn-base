using DAC.Core;
using DAC.Core.Security;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace PIPT
{
    public partial class frmDacDistributeToStore : Form
    {
        #region Instance of the form
        /// <summary>
        /// Instance to store instance of this form
        /// </summary>
        private static frmDacDistributeToStore _instance = null;

        /// <summary>
        /// Instance form.
        /// </summary>
        /// <returns>Instance of this Form</returns>
        public static frmDacDistributeToStore Instance()
        {
            if (_instance == null || _instance.IsDisposed)
            {
                _instance = new frmDacDistributeToStore();
            }
            return _instance;
        }

        public static frmDacDistributeToStore Instance(Form parent)
        {
            _instance = Instance();
            _instance.MdiParent = parent;
            return _instance;
        }

        public static frmDacDistributeToStore Instance(Form parent, bool isActivate)
        {
            _instance = Instance(parent);
            if (isActivate)
            {
                _instance.WindowState = FormWindowState.Normal;
                _instance.Show();
                _instance.Activate();
            }
            return _instance;
        }
        #endregion
        #region Variables
        DacDistributeToStoreCollection distributeToStoreCollection = new DacDistributeToStoreCollection();
        DacDistributeToStoreDetailsCollection distributeToStoreDetailsCollection = new DacDistributeToStoreDetailsCollection();
        BindingList<DacDistributeToStore> bdlDistributeToStore;
        BindingList<DistributeDetailModel> bdlDistributeToStoreDetails;
        DacDistributeToStoreCS distributeToStoreCS = new DacDistributeToStoreCS();
        DacDistributeToStoreDetailsCS dacDistributeToStoreDetailsCS = new DacDistributeToStoreDetailsCS();
        SecConfig secConfig = CommonBO.GetSecConfig("AutoIncreaseOrderStore");
        SecConfig secConfigPkg = CommonBO.GetSecConfig("AutoIncreasePackage");
        // DataView for Agency table
        DataView dvAgency;
        // DataView for Product table
        DataView dvProduct;
        // Check Box Select All
        int TotalCheckBoxes = 0;
        int TotalCheckedCheckBoxes = 0;
        CheckBox HeaderCheckBox = null;
        bool IsHeaderCheckBoxClicked = false;
        string AgencyCode = string.Empty;
        List<string> LstDupplicateDacCode = new List<string>();
        // --------------------
        #endregion
        #region Form's Events
        public frmDacDistributeToStore()
        {
            InitializeComponent();
        }
        private void frmDacDistributeToStore_Load(object sender, EventArgs e)
        {
            // Lấy ra đại lý của user hiện tại
            string[] arrAgencyCode = CommonBS.CurrentUser.FullName.Split('-');
            if (arrAgencyCode.Length == 2)
                AgencyCode = arrAgencyCode[1];
            else if (CommonBS.CurrentUser.LoginID.ToLower() != "admin")
                AgencyCode = CommonBS.CurrentUser.FullName;
            InitData();
            InitLookUp();
            // Get Max order number
            textBoxOrderNumber.Text = this.GetMaxOrderNumber();
            // Get distributeToAgencyCollection from database
            // -----------------------------------------
            // Dinh lai thoi gia de load du lieu tai day
            // -----------------------------------------
            distributeToStoreCollection = distributeToStoreCS.GetListDistributeToStore(
                DateTime.Parse(CommonBO.GetSecConfig("DateStartGettingData").Value),
                DateTime.Now, string.Empty, string.Empty, CommonBS.CurrentUser.LoginID, AgencyCode);
            AddObjectDistributorIntoBindingList(distributeToStoreCollection);
            // Get data from database
            AddObjectDetailsIntoBindingList(distributeToStoreDetailsCollection);
            EnableControls(false);

            // Init Events For Select All CheckBox
            AddHeaderCheckBox();

            HeaderCheckBox.KeyUp += new KeyEventHandler(HeaderCheckBox_KeyUp);
            HeaderCheckBox.MouseClick += new MouseEventHandler(HeaderCheckBox_MouseClick);
            dataGridViewDetails.CellValueChanged += new DataGridViewCellEventHandler(dataGridViewDetails_CellValueChanged);
            dataGridViewDetails.CurrentCellDirtyStateChanged += new EventHandler(dataGridViewDetails_CurrentCellDirtyStateChanged);
            dataGridViewDetails.CellPainting += new DataGridViewCellPaintingEventHandler(dataGridViewDetails_CellPainting);

            //SetDistributeDetailsDataSource()
            // -----------------------------
        }

        private void frmDacDistributeToStore_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
                if (CommonCore.FormClosing("Bạn chưa lưu đơn hàng xuất này. Bạn có muốn lưu lại?"))
                {
                    //Luu lai du lieu xong thoat form;
                    this.SaveData();
                }
            }
        }
        #endregion
        #region Function on form
        private void InitData()
        {
            DAC.DAL.DacDbAccess dacDb = new DAC.DAL.DacDbAccess();
            dacDb.CreateNewSqlCommand();
            DataSet ds = new DataSet("Store_Product");
            DataTable dataTable = null;
            if (string.IsNullOrWhiteSpace(AgencyCode))
            {
                dataTable = dacDb.ExecuteDataTable("spDacStore_SelectAll");
            }
            else
            {
                dacDb.AddParameter("@AgencyCode", AgencyCode);
                dataTable = dacDb.ExecuteDataTable("spDacStore_SelectByAgencyCode");
                dacDb.RemoveParameter("@AgencyCode");
            }
            // Add table Agency
            dataTable.TableName = "Stores";
            ds.Tables.Add(dataTable);

            dacDb.AddParameter("@FactoryCode", string.Empty);
            dataTable = dacDb.ExecuteDataTable("spDacProduct_SelectAll");
            // Add table Product
            dataTable.TableName = "Products";
            ds.Tables.Add(dataTable);

            DataViewManager dvm = new DataViewManager(ds);
            dvAgency = dvm.CreateDataView(ds.Tables["Stores"]);
            dvProduct = dvm.CreateDataView(ds.Tables["Products"]);

            // Add Stock filter by Username
            dacDb.CreateNewSqlCommand();
            dacDb.AddParameter("@Code", string.Empty);
            dacDb.AddParameter("@Name", string.Empty);
            dacDb.AddParameter("@Email", string.Empty);
            dacDb.AddParameter("@Mobi", string.Empty);
            dacDb.AddParameter("@LoginID", CommonBS.CurrentUser.LoginID);
            dataTable = dacDb.ExecuteDataTable("DacStock_Select");
            gridLookUpEditDacStock.Properties.DataSource = dataTable;
        }
        private void InitLookUp()
        {
            // The data source for the dropdown rows
            gridLookUpEditStore.Properties.DataSource = dvAgency;
            gridLookUpEditProduct.Properties.DataSource = dvProduct;
            gridLookUpEditProductChoose.Properties.DataSource = dvProduct;
        }
        private void AddObjectDistributorIntoBindingList(DacDistributeToStoreCollection DistributeToStoreCollection)
        {
            bdlDistributeToStore = new BindingList<DacDistributeToStore>();
            foreach (DacDistributeToStore DistributeToStore in DistributeToStoreCollection)
            {
                bdlDistributeToStore.Add(DistributeToStore);
            }
            SetDataSource();
        }
        private void SetDataSource()
        {
            CommonCore.ClearDataBinding(panelDistributeToStore);
            // Binding data to Controls
            textBoxOrderNumber.DataBindings.Add("Text", bdlDistributeToStore, "OrderNumber");
            textBoxQuantity.DataBindings.Add("Text", bdlDistributeToStore, "Quantity");
            gridLookUpEditStore.DataBindings.Clear();
            gridLookUpEditStore.DataBindings.Add("EditValue", bdlDistributeToStore, "StoreCode");
            gridLookUpEditDacStock.DataBindings.Clear();
            gridLookUpEditDacStock.DataBindings.Add("EditValue", bdlDistributeToStore, "StockID");
            richTextBoxDescription.DataBindings.Add("Text", bdlDistributeToStore, "Description");
            dateTimePickerCreatedDate.DataBindings.Clear();
            dateTimePickerCreatedDate.DataBindings.Add("Value", bdlDistributeToStore, "CreatedDate");
            checkBoxActive.DataBindings.Clear();
            checkBoxActive.DataBindings.Add("Checked", bdlDistributeToStore, "Active");
            // Huy su kien SelectionChanged truoc khi gan DataSource
            this.gridViewDistributor.FocusedRowChanged -= new DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventHandler(this.gridViewDistributor_FocusedRowChanged);
            gridControlDistributor.DataSource = bdlDistributeToStore;
            this.gridViewDistributor.FocusedRowChanged += new DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventHandler(this.gridViewDistributor_FocusedRowChanged);
            if (bdlDistributeToStore.Count > 0)
            {
                this.GetDetailData();
            }
            EnableControls(false);
        }
        private void AddObjectDetailsIntoBindingList(DacDistributeToStoreDetailsCollection distributeToStoreDetailsCollection)
        {
            bdlDistributeToStoreDetails = new BindingList<DistributeDetailModel>();
            foreach (DacDistributeToStoreDetails distributeToStoreDetail in distributeToStoreDetailsCollection)
            {
                DistributeDetailModel DetailModel = new DistributeDetailModel();
                DetailModel.ID = distributeToStoreDetail.ID;
                DetailModel.DistributorID = distributeToStoreDetail.DistributorID;
                DetailModel.DacCode = distributeToStoreDetail.DacCode;
                DetailModel.ProductCode = distributeToStoreDetail.ProductCode;
                DetailModel.PackageCode = GetPackageCodeByDacCode(distributeToStoreDetail.DacCode);
                bdlDistributeToStoreDetails.Add(DetailModel);
            }
            SetDistributeDetailsDataSource();
        }
        private void SetDistributeDetailsDataSource()
        {
            gridLookUpEditProduct.DataBindings.Clear();
            gridLookUpEditProduct.DataBindings.Add("EditValue", bdlDistributeToStoreDetails, "ProductCode");
            dataGridViewDetails.DataSource = bdlDistributeToStoreDetails;

            TotalCheckBoxes = dataGridViewDetails.RowCount;
            TotalCheckedCheckBoxes = 0;
        }
        private void EnableControls(bool bIsEnabled)
        {
            foreach (Control ctrl in panelDistributeToStore.Controls)
            {
                if (ctrl.Name != "checkEditKeepOrder")
                    ctrl.Enabled = bIsEnabled;
            }
        }
        private bool IsChangedData()
        {
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
            }
            else if (ucDataButtonStore.DataMode == DataState.Edit)
            {
                //if (selectedDacProduct.ProductUnitId != (int)comboBoxAgency.SelectedValue
                //|| selectedDacProduct.ProductCategoryId != (int)comboBoxProvince.SelectedValue
                //|| selectedDacProduct.Remark != richTextBoxDescription.Text.Trim()
                //|| selectedDacProduct.Active != checkBoxActive.Checked)
                //    return true;
                //else
                //    return false;
            }
            return false;
        }
        private bool IsDataOK()
        {
            if (gridLookUpEditStore.EditValue == null)
            {
                MessageBox.Show("Bạn chưa chọn mã khu vực/miền.", "Thông báo" + Common.formSoftName);
                gridLookUpEditStore.Focus();
                return false;
            }
            if (gridLookUpEditProduct.EditValue == null)
            {
                MessageBox.Show("Bạn chưa chọn mã sản phẩm.", "Thông báo" + Common.formSoftName);
                gridLookUpEditProduct.Focus();
                return false;
            }
            if (dataGridViewDetails.Rows.Count == 0)
            {
                MessageBox.Show("Bạn chưa nhập bất kỳ mã an ninh nào.", "Thông báo" + Common.formSoftName);
                textBoxDacCode.Focus();
                return false;
            }
            return true;
        }
        private bool SaveData()
        {
            if (IsDataOK() == false) return false;

            bool bResult = true;
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
                DacDistributeToStore distributeToStore = new DacDistributeToStore();
                distributeToStore.OrderNumber = textBoxOrderNumber.Text;
                // Kiem tra lai OrderNumber
                if (secConfig.Value == "true")
                {
                    if (this.GetMaxOrderNumber() != distributeToStore.OrderNumber)
                    {
                        distributeToStore.OrderNumber = this.GetMaxOrderNumber();
                        textBoxOrderNumber.Text = distributeToStore.OrderNumber;
                    }
                }
                distributeToStore.CreatedDate = dateTimePickerCreatedDate.Value;
                distributeToStore.StoreCode = gridLookUpEditStore.EditValue.ToString();
                distributeToStore.ProductCode = gridLookUpEditProduct.EditValue.ToString();
                distributeToStore.Quantity = Convert.ToDouble(textBoxQuantity.Text);
                distributeToStore.Description = richTextBoxDescription.Text;
                distributeToStore.StockID = gridLookUpEditDacStock.EditValue.ToString();
                distributeToStore.Active = checkBoxActive.Checked;
                // Lay AgencyCode de co gia tri ID
                string _AgencyCode = distributeToStoreCS.GetAgencyCodeByStoreCode(distributeToStore.StoreCode);
                distributeToStore.ID = DacDistributeToStoreCS.GetMaxID(_AgencyCode);

                bResult = distributeToStoreCS.Insert(distributeToStore);
                if (bResult)
                {
                    gridViewDistributor.SetFocusedRowCellValue(gridColumnID, distributeToStore.ID);
                    // Doi lai ID da luu trong database
                    for (int i = 0; i < distributeToStoreDetailsCollection.Count; i++)
                    {
                        distributeToStoreDetailsCollection[i].DistributorID = distributeToStore.ID;
                    }
                    // Convert list to datatable
                    DataTable dataTable = CommonCore.GetDataTable(distributeToStoreDetailsCollection, typeof(DacDistributeToStoreDetails));
                    dataTable.TableName = "DacDistributeToStoreDetails"; // Ten bang trong CSDL
                    //DacDistributeToAgencyDetailsCS dacDistributeDetailsCS = new DacDistributeToAgencyDetailsCS();
                    // Khai bao mang cac cot trong bang du lieu can mapping
                    string[] sColumnName = new string[] { "DistributorID", "DacCode", "ProductCode" };
                    CommonCore.PerformBulkCopy(dataTable, sColumnName);
                    bResult = true;
                }
            }
            else
            {
                // Update data in to DacDistributeToStore
                DacDistributeToStore distributeToStore = new DacDistributeToStore();
                distributeToStore = (DacDistributeToStore)gridViewDistributor.GetRow(gridViewDistributor.FocusedRowHandle);
                // Update to DataBase
                bResult = distributeToStoreCS.Update(distributeToStore);
            }
            // Kiem tra luu thanh cong khong de load lai du lieu
            if (bResult)
            {
                if (ucDataButtonStore.DataMode == DataState.Insert)
                {
                    // Get distributeToAgencyCollection from database
                    // -----------------------------------------
                    // Dinh lai thoi gia de load du lieu tai day
                    // -----------------------------------------
                    distributeToStoreCollection = distributeToStoreCS.GetListDistributeToStore(
                        DateTime.Parse(CommonBO.GetSecConfig("DateStartGettingData").Value),
                        DateTime.Now, string.Empty, string.Empty, CommonBS.CurrentUser.LoginID, AgencyCode);
                    AddObjectDistributorIntoBindingList(distributeToStoreCollection);
                    // Get data from database
                    AddObjectDetailsIntoBindingList(distributeToStoreDetailsCollection);
                    // CommonBS.SaveSuccessfully();
                }
                ucDataButtonStore.DataMode = DataState.View;
                ucDataButtonStore.SetInsertFocus();
                EnableControls(false);
                this.GetDetailData();
            }
            else CommonBS.SaveNotSuccessfully();

            return bResult;
        }
        private void SaveDistributeToAgency()
        {
            SaveData();
        }
        private void AddDistributDetails(DacDistributeToStoreDetails distributeDetails)
        {
            // Kiem tra su ton tai cua ma QRCode
            foreach (DacDistributeToStoreDetails detail in distributeToStoreDetailsCollection)
            {
                // Neu co roi thi thoat luon khoi ham.
                if (detail.DacCode == distributeDetails.DacCode)
                {
                    if (chkAgreeAll.Checked)
                    {
                        LstDupplicateDacCode.Add(distributeDetails.DacCode);
                        return;
                    }
                    else
                    {
                        MessageBox.Show("Mã QRCode này đã tồn tại trong CSDL. \r\nBạn không thể thêm QRCode được nữa!", "Thông báo", MessageBoxButtons.OK);
                        return;
                    }
                }
            }
            // Kiem tra san pham da nhap kho hay chua
            //if (ConfigurationManager.AppSettings["CheckInWarehouse"].ToString() == "true")
            //{
            //    DacInsertToWarehouseDetailsCollection warehouseDetailsCollection = warehouseDetailsCS.GetInsertDetails(distributeDetails.DacCode, "spDacInsertToWarehouseDetails_SelectByDacCode");
            //    if (warehouseDetailsCollection.Count <= 0)
            //    {
            //        MessageBox.Show("Bạn chưa nhập kho mã này!", "PIPT - Thong bao");
            //        return;
            //    }
            //}
            // Kiem tra trong database
            DacDistributeToStoreDetailsCollection detailsCollection = dacDistributeToStoreDetailsCS.GetDistributeDetailsByDacCode(distributeDetails.DacCode);
            if(detailsCollection.Count > 0)
            {
                if (chkAgreeAll.Checked)
                {
                    LstDupplicateDacCode.Add(distributeDetails.DacCode);
                    return;
                }
                else
                {
                    MessageBox.Show("Mã QRCode này đã tồn tại trong CSDL. \r\nBạn không thể thêm QRCode được nữa!", "Thông báo", MessageBoxButtons.OK);
                    return;
                }
            }
            // Kiem tra neu khong phai dang Insert thi lay ID cua dong dang focus.
            if (ucDataButtonStore.DataMode != DataState.Insert)
            {
                string sDistributorID = gridViewDistributor.GetFocusedRowCellValue(gridColumnID).ToString();
                // Gan lai ID cho DistributeDetails
                distributeDetails.DistributorID = sDistributorID;
            }
            distributeToStoreDetailsCollection.Add(distributeDetails);
            labelProductCount.Text = String.Format("Số sản phẩm đã thêm: {0:0,0}", distributeToStoreDetailsCollection.Count);
            textBoxQuantity.Text = distributeToStoreDetailsCollection.Count.ToString();
            AddObjectDetailsIntoBindingList(distributeToStoreDetailsCollection);
            //Set focus on DataGridView
            if (dataGridViewDetails.Rows.Count > 0)
            {
                dataGridViewDetails.CurrentCell = dataGridViewDetails.Rows[dataGridViewDetails.Rows.Count - 1].Cells[2];
                dataGridViewDetails.Rows[dataGridViewDetails.Rows.Count - 1].Cells[2].Selected = true;
            }
        }

        private void gridViewDistributor_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            this.GetDetailData();
        }
        private void GetDetailData()
        {
            if (gridViewDistributor.RowCount == 0)
                return;
            //if (gridViewDistributor.FocusedRowHandle < 0)
            //    return;
            try
            {
                DacDistributeToStoreDetailsCS distributeDetailsCS = new DacDistributeToStoreDetailsCS();
                string iDistributorID = gridViewDistributor.GetRowCellValue(gridViewDistributor.FocusedRowHandle, "ID").ToString();
                distributeToStoreDetailsCollection = distributeDetailsCS.GetDistributeDetails(iDistributorID);
                AddObjectDetailsIntoBindingList(distributeToStoreDetailsCollection);
                labelProductCount.Text = String.Format("Số sản phẩm đã thêm: {0:0,0}", distributeToStoreDetailsCollection.Count);
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.Message, "PIPT - Thông báo");
                return;
            }
        }

        // Get Max order number
        private string GetMaxOrderNumber()
        {
            string OrderNumber = string.Empty;
            if (secConfig.Value == "true")
            {
                OrderNumber = DacDistributeToStoreCS.GetMaxOrderNumber();
            }
            return OrderNumber;
        }
        #endregion
        #region Buttons' Event
        private void ucDataButtonProduct_InsertHandler()
        {
            // Lay gia tri Agency va Product de giu lai
            string AgencyCode = gridLookUpEditStore.EditValue.ToString();
            string ProductCode = gridLookUpEditProduct.EditValue.ToString();
            string Order = textBoxOrderNumber.Text;
            string StockID = gridLookUpEditDacStock.EditValue.ToString();
            //bdlDistributeToAgency.AddNew();
            DevExpress.XtraGrid.Views.Grid.GridView view = gridControlDistributor.FocusedView as DevExpress.XtraGrid.Views.Grid.GridView;
            view.AddNewRow();
            gridControlDistributor.RefreshDataSource();
            EnableControls(true);
            //Set focus for DataGridView
            gridViewDistributor.FocusedRowHandle = gridViewDistributor.GetVisibleRowHandle(gridViewDistributor.RowCount - 1);
            // Kiem tra neu giu lai lenh thi khong tang lenh len nua
            if (checkEditKeepOrder.Checked)
            {
                textBoxOrderNumber.Text = Order;
                gridLookUpEditStore.EditValue = AgencyCode;
                gridLookUpEditProduct.EditValue = ProductCode;
            }
            else
            {
                // Get Max order number
                textBoxOrderNumber.Text = this.GetMaxOrderNumber();
            }
            gridLookUpEditDacStock.EditValue = StockID;
        }

        private void ucDataButtonProduct_SaveHandler()
        {
            // Lưu nhật ký
            CommonBO.Instance().TraceLogEvent("Lưu phân phối đến Cửa hàng: " + textBoxOrderNumber.Text + " - "
                + textBoxQuantity.Text + " - " + gridLookUpEditStore.EditValue, CommonBS.CurrentUser.LoginID);
            Common objCommon = new Common();
            objCommon.CurrentForm = this;
            objCommon.CurrentFormMethodInvoker = SaveDistributeToAgency;
            objCommon.App_ShowWaitForm(DataState.Insert);
        }

        private void ucDataButtonProduct_EditHandler()
        {
            // Lưu nhật ký
            CommonBO.Instance().TraceLogEvent("Sửa phân phối đến Cửa hàng: " + textBoxOrderNumber.Text + " - "
                + textBoxQuantity.Text + " - " + gridLookUpEditStore.EditValue, CommonBS.CurrentUser.LoginID);
            // Kiem tra xem co du lieu nao khong
            if (dataGridViewDetails.Rows.Count == 0) return;
            // Lay du lieu de sua
            EnableControls(true);
        }

        private void ucDataButtonProduct_DeleteHandler()
        {
            // Kiem tra xem co du lieu nao khong
            if (dataGridViewDetails.Rows.Count == 0)
            {
                return;
            }
            // Lay du lieu de xoa
            string sID = gridViewDistributor.GetFocusedRowCellValue(gridColumnID).ToString();
            if (sID != string.Empty)
            {
                if (MessageBox.Show("Bạn có chắc chắn muốn xóa mục này?", "Thong bao", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    distributeToStoreCS.Delete(sID);
                    try
                    {
                        // Lưu nhật ký
                        CommonBO.Instance().TraceLogEvent("Xóa phân phối đến Cửa hàng: ID = " + sID + " - " + textBoxOrderNumber.Text + " - "
                            + textBoxQuantity.Text + " - " + gridLookUpEditStore.EditValue, CommonBS.CurrentUser.LoginID);
                        DevExpress.XtraGrid.Views.Grid.GridView view = gridControlDistributor.FocusedView as DevExpress.XtraGrid.Views.Grid.GridView;
                        view.DeleteRow(view.FocusedRowHandle);
                    }
                    catch
                    {
                        return;
                    }
                }
            }
            // Kiem tra moi lien quan voi du lieu khac neu co
        }

        private void ucDataButtonProduct_CancelHandler()
        {
            EnableControls(false);
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
                DevExpress.XtraGrid.Views.Grid.GridView view = gridControlDistributor.FocusedView as DevExpress.XtraGrid.Views.Grid.GridView;
                view.DeleteRow(view.FocusedRowHandle);
            }
            // Gan lai trang thai view
            ucDataButtonStore.DataMode = DataState.View;
            //Set focus for DataGridView
        }

        private void ucDataButtonProduct_CloseHandler()
        {
            if (IsChangedData())
            {
                if (CommonBS.ConfirmChangedData() == DialogResult.Yes)
                {
                    if (SaveData() == false)
                        return;
                }
            }
            this.Close();
        }

        private void buttonEnter_Click(object sender, EventArgs e)
        {
            GetDacCode(textBoxDacCode.Text.Trim());
        }

        private void GetDacCode(string DacCode)
        {
            if (DacCode.Length >= 7)
            {
                string serial = CommonCore.GetSerialFromScanner(DacCode);
                StringBuilder sbPackageType = new StringBuilder();
                foreach (char item in serial)
                {
                    if (char.IsLetter(item))
                        sbPackageType.Append(item);
                }
                string PackageType = sbPackageType.ToString().ToUpper();
                string PackageSymbol = secConfigPkg.Pattern.Substring(0, 3);
                if (!string.IsNullOrWhiteSpace(PackageType) && PackageType == PackageSymbol)
                {
                    
                    DacPackageDetailsCS dacPackageDetailsCS = new DacPackageDetailsCS();
                    DacPackageDetailsCollection PackageDetailsCollection = dacPackageDetailsCS.GetPackageDetails(DacCode, PackageType);
                    if (PackageDetailsCollection.Count > 0)
                    {
                        foreach (DacPackageDetails packageDetails in PackageDetailsCollection)
                        {
                            AddDistributDetails(new DacDistributeToStoreDetails(-1, gridLookUpEditStore.Properties.GetIndexByKeyValue(gridLookUpEditStore.EditValue).ToString(),
                                packageDetails.DacCode, packageDetails.ProductCode));
                            textBoxDacCode.Text = string.Empty;
                        }
                        if (chkAgreeAll.Checked)
                        {
                            AlertDupplicateCode();
                        }
                    }
                }
                else
                {
                    if (gridLookUpEditProductChoose.Properties.GetIndexByKeyValue(gridLookUpEditProductChoose.EditValue) >= 0)
                    {
                        AddDistributDetails(new DacDistributeToStoreDetails(-1, gridLookUpEditStore.Properties.GetIndexByKeyValue(gridLookUpEditStore.EditValue).ToString(), serial,
                        gridLookUpEditProductChoose.EditValue.ToString()));
                        textBoxDacCode.Text = string.Empty;
                    }
                    else
                    {
                        MessageBox.Show("Bạn chưa chọn sản phẩm nào, hãy chọn một sản phẩm để tiếp tục!", "Thông báo", MessageBoxButtons.OK);
                    }
                }
            }
        }

        private void buttonUpdateDetail_Click(object sender, EventArgs e)
        {
            try
            {
                int iQuantity = 0;
                string sContent = string.Empty;
                foreach (DacDistributeToStoreDetails details in distributeToStoreDetailsCollection)
                {
                    // Nhung ID moi them se co ID = -1
                    // Neu ID = -1 thi Insert vao database
                    if (details.ID == -1)
                    {
                        dacDistributeToStoreDetailsCS.Insert(details);
                        iQuantity += 1;
                        sContent += details.DacCode + "-" + details.ProductCode + ", ";
                    }
                }
                if (iQuantity > 0)
                {
                    // Lưu nhật ký
                    CommonBO.Instance().TraceLogEvent("Thêm QRCode vào lệnh phân phối đến Cửa hàng: " + textBoxOrderNumber.Text + " - "
                        + textBoxQuantity.Text + " - " + gridLookUpEditStore.EditValue + " - " + sContent, CommonBS.CurrentUser.LoginID);
                    distributeToStoreCS.Update(distributeToStoreDetailsCollection[0].DistributorID, iQuantity);
                }
                this.GetDetailData();
                MessageBox.Show("Bạn đã thêm các mã QRCode thành công!", "Thông báo");
            }
            catch
            {
                MessageBox.Show("Có lỗi đã xảy ra khi thêm các mã QRCode!", "Thông báo");
            }
        }

        private void buttonDetailDelete_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Bạn có chắc chắn xóa mã QRCode đã chọn?", "Thong bao - Xoa ma QRCode", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                string sContent = string.Empty;
                List<DistributeDetailModel> detailsCollection = new List<DistributeDetailModel>();
                foreach (DataGridViewRow Row in dataGridViewDetails.Rows)
                    if (((DataGridViewCheckBoxCell)Row.Cells["IsSelected"]).Value != null)
                    {
                        if ((bool)((DataGridViewCheckBoxCell)Row.Cells["IsSelected"]).Value)
                        {
                            DistributeDetailModel distributeDetails = (DistributeDetailModel)Row.DataBoundItem;
                            detailsCollection.Add(distributeDetails);
                            if (distributeDetails.ID > 0)
                            {
                                // Xoa tren Database
                                dacDistributeToStoreDetailsCS.Delete(distributeDetails.ID);
                                sContent += distributeDetails.DacCode + "-" + distributeDetails.ProductCode + ", ";
                            }
                        }
                    }
                // Lưu nhật ký
                CommonBO.Instance().TraceLogEvent("Xóa QRCode khỏi lệnh phân phối đến Cửa hàng: " + textBoxOrderNumber.Text + " - "
                    + textBoxQuantity.Text + " - " + gridLookUpEditStore.EditValue + " - " + sContent, CommonBS.CurrentUser.LoginID);
                foreach (DistributeDetailModel distributeDetails in detailsCollection)
                {
                    distributeToStoreDetailsCollection.Remove(distributeToStoreDetailsCollection.Find(x => x.ID == distributeDetails.ID));
                    bdlDistributeToStoreDetails.Remove(distributeDetails);
                }
                bdlDistributeToStoreDetails.ResetBindings();
            }
        }

        private void textBoxDacCode_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                GetDacCode(textBoxDacCode.Text.Trim());
            }
        }

        private void buttonRefreshAgency_Click(object sender, EventArgs e)
        {
            InitData();
            InitLookUp();
        }
        private void GetRangSerialNumber(string frSerie, string toSerie)
        {
            try
            {
                string sPreSeriValue = ConfigurationManager.AppSettings["PreSeri"].ToString();
                string[] sPreSeris = sPreSeriValue.Split(',');
                string sPreSeri = string.Empty;
                if (sPreSeriValue.Length > 0)
                {
                    foreach (string PreSeri in sPreSeris)
                    {
                        if (frSerie.Contains(PreSeri.Trim()))
                        {
                            sPreSeri = PreSeri.Trim();
                            break;
                        }
                    }
                }
                long iFrSerie = 0;
                long iToSerie = 0;
                if (sPreSeri.Length == 0)
                {
                    iFrSerie = Convert.ToInt64(frSerie);
                    iToSerie = Convert.ToInt64(toSerie);
                }
                else
                {
                    sPreSeri = frSerie.Substring(0, sPreSeri.Length);
                    iFrSerie = Convert.ToInt64(frSerie.Substring(sPreSeri.Length, frSerie.Length - sPreSeri.Length));
                    iToSerie = Convert.ToInt64(toSerie.Substring(sPreSeri.Length, toSerie.Length - sPreSeri.Length));
                }
                if (iToSerie > iFrSerie)
                {
                    for (long i = iFrSerie; i <= iToSerie; i++)
                    {
                        AddDistributDetails(new DacDistributeToStoreDetails(-1, gridLookUpEditStore.Properties.GetIndexByKeyValue(gridLookUpEditStore.EditValue).ToString(),
                            String.Format("{0}{1:" + CommonBO.GetSecConfig("SeriLength").Pattern + "}", sPreSeri, i), gridLookUpEditProductChoose.EditValue.ToString()));
                    }
                    if (chkAgreeAll.Checked)
                    {
                        AlertDupplicateCode();
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void AlertDupplicateCode()
        {
            if (LstDupplicateDacCode != null && LstDupplicateDacCode.Count != 0)
            {
                string message = "Số lượng mã trùng đã bị loại khỏi danh sách: " + LstDupplicateDacCode.Count;
                MessageBox.Show(message, "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                LstDupplicateDacCode.Clear();
            }
        }

        private void FrSeriTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                string DacCode = FrSeriTextBox.Text.Trim();
                if (DacCode.Length >= 7)
                {
                    string serial = CommonCore.GetSerialFromScanner(DacCode);
                    FrSeriTextBox.Text = serial;
                    ToSeriTextBox.Focus();
                }
            }
        }

        private void ToSeriTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                string DacCode = ToSeriTextBox.Text.Trim();
                if (DacCode.Length >= 7)
                {
                    string serial = CommonCore.GetSerialFromScanner(DacCode);
                    ToSeriTextBox.Text = serial;
                    if (gridLookUpEditProductChoose.Properties.GetIndexByKeyValue(gridLookUpEditProductChoose.EditValue) >= 0)
                    {
                        GetRangSerialNumber(FrSeriTextBox.Text, ToSeriTextBox.Text);
                        ToSeriTextBox.Text = string.Empty;
                        FrSeriTextBox.Text = string.Empty;
                        FrSeriTextBox.Focus();
                    }
                    else
                    {
                        MessageBox.Show("Bạn chưa chọn sản phẩm nào, hãy chọn một sản phẩm để tiếp tục!", "Thông báo", MessageBoxButtons.OK);
                    }
                }
            }
        }
        private string GetPackageCodeByDacCode(string DacCode)
        {
            var PackageCS = new DacPackageCS();
            var Package = PackageCS.GetPackageCodeByDacCode(DacCode);
            return Package.PackageCode;
        }
        #endregion
        #region Events For Select All CheckBox
        private void AddHeaderCheckBox()
        {
            HeaderCheckBox = new CheckBox();

            HeaderCheckBox.Size = new Size(15, 15);

            //Add the CheckBox into the DataGridView
            this.dataGridViewDetails.Controls.Add(HeaderCheckBox);
        }

        private void HeaderCheckBox_KeyUp(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Space)
                HeaderCheckBoxClick((CheckBox)sender);
        }
        private void HeaderCheckBox_MouseClick(object sender, MouseEventArgs e)
        {
            HeaderCheckBoxClick((CheckBox)sender);
        }

        private void HeaderCheckBoxClick(CheckBox HCheckBox)
        {
            IsHeaderCheckBoxClicked = true;

            foreach (DataGridViewRow Row in dataGridViewDetails.Rows)
                ((DataGridViewCheckBoxCell)Row.Cells["IsSelected"]).Value = HCheckBox.Checked;

            dataGridViewDetails.RefreshEdit();

            TotalCheckedCheckBoxes = HCheckBox.Checked ? TotalCheckBoxes : 0;

            IsHeaderCheckBoxClicked = false;
        }

        private void dataGridViewDetails_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            if (e.RowIndex == -1 && e.ColumnIndex == 0)
                ResetHeaderCheckBoxLocation(e.ColumnIndex, e.RowIndex);
        }

        private void dataGridViewDetails_CurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            if (dataGridViewDetails.CurrentCell is DataGridViewCheckBoxCell)
                dataGridViewDetails.CommitEdit(DataGridViewDataErrorContexts.Commit);
        }

        private void dataGridViewDetails_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (!IsHeaderCheckBoxClicked)
                RowCheckBoxClick((DataGridViewCheckBoxCell)dataGridViewDetails[e.ColumnIndex, e.RowIndex]);
        }

        private void ResetHeaderCheckBoxLocation(int ColumnIndex, int RowIndex)
        {
            //Get the column header cell bounds
            Rectangle oRectangle = this.dataGridViewDetails.GetCellDisplayRectangle(ColumnIndex, RowIndex, true);

            Point oPoint = new Point();

            oPoint.X = oRectangle.Location.X + (oRectangle.Width - HeaderCheckBox.Width) / 2 + 1;
            oPoint.Y = oRectangle.Location.Y + (oRectangle.Height - HeaderCheckBox.Height) / 2 + 1;

            //Change the location of the CheckBox to make it stay on the header
            HeaderCheckBox.Location = oPoint;
        }

        private void RowCheckBoxClick(DataGridViewCheckBoxCell RCheckBox)
        {
            if(RCheckBox != null)
            {
                //Modify Counter;
                if ((bool)RCheckBox.Value && TotalCheckedCheckBoxes < TotalCheckBoxes)
                    TotalCheckedCheckBoxes++;
                else if (TotalCheckedCheckBoxes > 0)
                    TotalCheckedCheckBoxes--;

                //Change state of the header CheckBox;
                if (TotalCheckedCheckBoxes < TotalCheckBoxes)
                    HeaderCheckBox.Checked = false;
                else if (TotalCheckedCheckBoxes == TotalCheckBoxes)
                    HeaderCheckBox.Checked = true;
            }
        }
        #endregion
    }
}