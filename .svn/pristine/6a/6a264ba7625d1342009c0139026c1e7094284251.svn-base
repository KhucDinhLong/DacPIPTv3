@page "/user-role"
@using Microsoft.AspNetCore.Identity;
@using PIPTWeb.Client.Services
@inject IRoleService roleService
@inject ISecUsersService userService
@inject DialogService dialogService
@inject IUserRoleService userRoleService

@if (_User == null || LstRole == null || LstSelectedRole == null)
{
}
else
{
    <EditForm Model="@LstRole" OnValidSubmit="@(() => AddRoleForUser())" class="card card-body bg-light mt-5">
        <div class="modal-body">
            <div class="card card-success">
                <div class="card-header">
                    <h2 class="text-center">THÊM QUYỀN CHO TÀI KHOẢN</h2>
                    <h3 class="text-center">Tài khoản: @_User.UserName</h3>
                </div>

                <div class="form-horizontal">
                    <div class="card-body">
                        @foreach (SecRoles role in LstRole)
                        {
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" value="@role.Id" id="@role.Id" @onchange="eventArgs => { CheckboxClicked(role.Id, eventArgs.Value); }" checked ="@(LstSelectedRole.Contains(role.Id))" />
                                <label class="form-check-label" for="@role.Id">@role.Name</label>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </EditForm>
    <div class="modal-footer">
        <button type="button" class="btn btn-primary mr-auto" @onclick="OnClose">Hủy</button>
        <button type="submit" class="btn btn-success" @onclick="@(() => AddRoleForUser())">Lưu</button>
    </div>

}
@code {
    [Parameter] public EventCallback OnvalidSubmit { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public SecUsers _User { get; set; }
    [Parameter] public List<PIPTWeb.Shared.Models.SecRoles> LstRole { get; set; }
    [Parameter] public List<string> LstSelectedRole { get; set; } = new List<string>();

    private IdentityUserRole<string> userRole = new IdentityUserRole<string>();

    void CheckboxClicked(string roleId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!LstSelectedRole.Contains(roleId))
            {
                LstSelectedRole.Add(roleId);
            }
        }
        else
        {
            if (LstSelectedRole.Contains(roleId))
            {
                LstSelectedRole.Remove(roleId);
            }
        }
    }

    private async Task AddRoleForUser()
    {
        await userRoleService.DeleteUserRole(_User.Id);
        foreach (string roleId in LstSelectedRole)
        {
            if (!string.IsNullOrEmpty(roleId))
            {
                userRole.UserId = _User.Id;
                userRole.RoleId = roleId;
                await userRoleService.AddUserRole(userRole);
            }
        }
        await OnvalidSubmit.InvokeAsync();
    }

}
