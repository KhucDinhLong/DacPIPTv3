using DAC.Core;
using DAC.Core.Security;
using ExcelDataReader;
using System;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Windows.Forms;

namespace PIPT
{
    public partial class frmDacStore : Form
    {
        #region Instance of the form
        /// <summary>
        /// Instance to store instance of this form
        /// </summary>
        private static frmDacStore _instance = null;

        /// <summary>
        /// Instance form.
        /// </summary>
        /// <returns>Instance of this Form</returns>
        public static frmDacStore Instance()
        {
            if (_instance == null || _instance.IsDisposed)
            {
                _instance = new frmDacStore();
            }
            return _instance;
        }

        public static frmDacStore Instance(Form parent)
        {
            _instance = Instance();
            _instance.MdiParent = parent;
            return _instance;
        }

        public static frmDacStore Instance(Form parent, bool isActivate)
        {
            _instance = Instance(parent);
            if (isActivate)
            {
                _instance.WindowState = FormWindowState.Normal;
                _instance.Show();
                _instance.Activate();
            }
            return _instance;
        }
        #endregion
        #region Variables
        DacStore dacStore = new DacStore();
        DacStore selectedDacStore = new DacStore();
        DacStoreCollection dacStoreCollection = new DacStoreCollection();
        DacStoreCS dacStoreBS = new DacStoreCS();
        BindingList<DacStore> bdlDacStore;
        bool bIsDataBinding = false;
        bool bIsPastedData = false;
        string AgencyCode = string.Empty;
        #endregion
        #region Form's Events
        public frmDacStore()
        {
            InitializeComponent();
        }
        private void frmDacStore_Load(object sender, EventArgs e)
        {
            // Get AgencyCode
            string[] arrAgencyCode = CommonBS.CurrentUser.FullName.Split('-');
            if (arrAgencyCode.Length == 2)
                AgencyCode = arrAgencyCode[1];
            else if (CommonBS.CurrentUser.LoginID.ToLower() != "admin")
                AgencyCode = CommonBS.CurrentUser.FullName;
            // TODO: This line of code loads data into the 'dsRegion.DacRegion' table. You can move, or remove it, as needed.
            DAC.DAL.DacDbAccess dacDb = new DAC.DAL.DacDbAccess();
            dacDb.CreateNewSqlCommand();
            DataTable dataTable = dacDb.ExecuteDataTable("spProvince_SelectAll");
            dataTable.TableName = "Province";
            gridLookUpEditProvince.Properties.DataSource = dataTable;

            dataTable = dacDb.ExecuteDataTable("spDacAgency_SelectAll");
            dataTable.TableName = "DacAgency";
            gridLookUpEditAgencyCode.Properties.DataSource = dataTable;
            // Get data from database
            if (string.IsNullOrWhiteSpace(AgencyCode))
            {
                dacStoreCollection = dacStoreBS.GetListStore();
            }
            else
            {
                dacStoreCollection = dacStoreBS.GetListStore(AgencyCode);
            }
            // Get BindingList DataSource
            AddObjectIntoBindingList(dacStoreCollection);

            if (bIsDataBinding)
            {
                // Có ít nhất 1 row.
                //gridLookUpEditRegion.EditValue = 
            }
        }
        #endregion
        #region Functions on Form
        private void AddObjectIntoBindingList(DacStoreCollection StoreCollection)
        {
            bdlDacStore = new BindingList<DacStore>();
            foreach (DacStore store in StoreCollection)
            {
                bdlDacStore.Add(store);
            }
            SetDataSource();
        }
        private void SetDataSource()
        {
            CommonCore.ClearDataBinding(panelStore);
            // Binding data to Controls
            bIsDataBinding = true;
            textBoxCode.DataBindings.Add("Text", bdlDacStore, "Code");
            textBoxName.DataBindings.Add("Text", bdlDacStore, "Name");
            textBoxAddress.DataBindings.Add("Text", bdlDacStore, "Address");
            gridLookUpEditAgencyCode.DataBindings.Clear();
            gridLookUpEditAgencyCode.DataBindings.Add("EditValue", bdlDacStore, "AgencyCode");
            gridLookUpEditProvince.DataBindings.Clear();
            gridLookUpEditProvince.DataBindings.Add("EditValue", bdlDacStore, "ProvinceCode");
            textBoxShopKeeper.DataBindings.Add("Text", bdlDacStore, "ShopKeeper");
            textBoxPhoneNum.DataBindings.Add("Text", bdlDacStore, "PhoneNum");
            textBoxMobileNum.DataBindings.Add("Text", bdlDacStore, "MobileNum");
            textBoxEmail.DataBindings.Add("Text", bdlDacStore, "Email");
            richTextBoxDescription.DataBindings.Add("Text", bdlDacStore, "Description");
            dateTimePickerCreatedDate.DataBindings.Clear();
            dateTimePickerCreatedDate.DataBindings.Add("Value", bdlDacStore, "CreatedDate");
            dateTimePickerModifiedDate.DataBindings.Clear();
            dateTimePickerModifiedDate.DataBindings.Add("Value", bdlDacStore, "ModifiedDate");
            checkBoxActive.DataBindings.Clear();
            checkBoxActive.DataBindings.Add("Checked", bdlDacStore, "Active");

            gridControlStore.DataSource = bdlDacStore;
            bIsDataBinding = false;
            EnableControls(false);
        }
        private DacStore GetSelectedStore(string sCode)
        {
            foreach (DacStore store in dacStoreCollection)
            {
                if (store.Code == sCode)
                    return store;
            }
            return null;
        }
        private bool IsStoreCodeExists(string sCode)
        {
            foreach (DacStore store in dacStoreCollection)
            {
                if (store.Code == sCode.Trim().ToUpper())
                {
                    return true;
                }
            }
            return false;
        }
        private void EnableControls(bool bIsEnabled)
        {
            foreach (Control ctrl in panelStore.Controls)
            {
                ctrl.Enabled = bIsEnabled;
            }
            if (ucDataButtonStore.DataMode == DataState.Edit)
            {
                textBoxCode.Enabled = false;
                dateTimePickerCreatedDate.Enabled = false;
            }
        }
        private bool IsChangedData()
        {
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
                if (textBoxCode.Text.Trim().Length > 0 || textBoxName.Text.Trim().Length > 0)
                    return true;
                else
                    return false;
            }
            else if (ucDataButtonStore.DataMode == DataState.Edit)
            {
                if (selectedDacStore.Code != textBoxCode.Text.Trim()
                || selectedDacStore.Name != textBoxName.Text.Trim()
                || selectedDacStore.Address != textBoxAddress.Text.Trim()
                || selectedDacStore.ProvinceCode != gridLookUpEditProvince.EditValue.ToString()
                || selectedDacStore.ShopKeeper != textBoxShopKeeper.Text.Trim()
                || selectedDacStore.PhoneNum != textBoxPhoneNum.Text.Trim()
                || selectedDacStore.MobileNum != textBoxMobileNum.Text.Trim()
                || selectedDacStore.Email != textBoxEmail.Text.Trim()
                || selectedDacStore.Description != richTextBoxDescription.Text.Trim()
                || selectedDacStore.Active != checkBoxActive.Checked)
                    return true;
                else
                    return false;
            }
            return false;
        }
        private bool IsDataOK()
        {
            if (textBoxCode.Text.Trim().Length == 0)
            {
                MessageBox.Show("Bạn chưa nhập mã nhà thuốc / cửa hàng.", "Thông báo" + Common.formSoftName);
                textBoxCode.Focus();
                return false;
            }
            if (ucDataButtonStore.DataMode == DataState.Insert && IsStoreCodeExists(textBoxCode.Text))
            {
                MessageBox.Show("Mã nhà thuốc / cửa hàng này đã tồn tại.", "Thông báo" + Common.formSoftName);
                textBoxCode.Focus();
                textBoxCode.SelectAll();
                return false;
            }
            if (textBoxName.Text.Trim().Length == 0)
            {
                MessageBox.Show("Bạn chưa nhập tên nhà thuốc / cửa hàng.", "Thông báo" + Common.formSoftName);
                textBoxName.Focus();
                return false;
            }
            return true;
        }
        private void SaveCopiedData()
        {
            DacStore store = new DacStore();
            store.Code = textBoxCode.Text.Trim().ToUpper();
            store.Name = textBoxName.Text.Trim();
            store.Address = textBoxAddress.Text.Trim();
            store.ProvinceCode = gridLookUpEditProvince.EditValue.ToString();
            store.AgencyCode = gridLookUpEditAgencyCode.EditValue.ToString();
            store.ShopKeeper = textBoxShopKeeper.Text.Trim();
            store.PhoneNum = textBoxPhoneNum.Text.Trim();
            store.MobileNum = textBoxMobileNum.Text.Trim();
            store.Email = textBoxEmail.Text.Trim();
            store.Description = richTextBoxDescription.Text.Trim();
            store.CreatedDate = dateTimePickerCreatedDate.Value;
            store.CreatedUser = CommonBS.CurrentUser.LoginID;
            store.ModifiedDate = dateTimePickerModifiedDate.Value;
            store.ModifiedUser = string.Empty;
            store.Active = checkBoxActive.Checked;

            dacStoreBS.Insert(store);
        }
        private bool SaveData()
        {
            if (IsDataOK() == false) return false;

            bool bResult = true;
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
                DacStore store = new DacStore();
                store.Code = textBoxCode.Text.Trim().ToUpper();
                store.Name = textBoxName.Text.Trim();
                store.Address = textBoxAddress.Text.Trim();
                store.ProvinceCode = gridLookUpEditProvince.EditValue.ToString();
                if (string.IsNullOrWhiteSpace(AgencyCode))
                    store.AgencyCode = gridLookUpEditAgencyCode.EditValue.ToString();
                else
                    store.AgencyCode = AgencyCode;
                store.ShopKeeper = textBoxShopKeeper.Text.Trim();
                store.PhoneNum = textBoxPhoneNum.Text.Trim();
                store.MobileNum = textBoxMobileNum.Text.Trim();
                store.Email = textBoxEmail.Text.Trim();
                store.Description = richTextBoxDescription.Text.Trim();
                store.CreatedDate = dateTimePickerCreatedDate.Value;
                store.CreatedUser = CommonBS.CurrentUser.LoginID;
                store.ModifiedDate = dateTimePickerModifiedDate.Value;
                store.ModifiedUser = string.Empty;
                store.Active = checkBoxActive.Checked;

                bResult = dacStoreBS.Insert(store);
            }
            else
            {
                // Update data in to databaseDacAgency
                selectedDacStore.Code = textBoxCode.Text.Trim().ToUpper();
                selectedDacStore.Name = textBoxName.Text.Trim();
                selectedDacStore.Address = textBoxAddress.Text.Trim();
                selectedDacStore.ProvinceCode = gridLookUpEditProvince.EditValue.ToString();
                selectedDacStore.ShopKeeper = textBoxShopKeeper.Text.Trim();
                selectedDacStore.PhoneNum = textBoxPhoneNum.Text.Trim();
                selectedDacStore.MobileNum = textBoxMobileNum.Text.Trim();
                if (string.IsNullOrWhiteSpace(AgencyCode))
                    selectedDacStore.AgencyCode = gridLookUpEditAgencyCode.EditValue.ToString();
                else
                    selectedDacStore.AgencyCode = AgencyCode;
                selectedDacStore.Email = textBoxEmail.Text.Trim();
                selectedDacStore.Description = richTextBoxDescription.Text.Trim();
                selectedDacStore.CreatedDate = dateTimePickerCreatedDate.Value;
                //selectedDacStore.CreatedUser = CommonBS.CurrentUser.LoginID;
                selectedDacStore.ModifiedDate = DateTime.Now;
                selectedDacStore.ModifiedUser = CommonBS.CurrentUser.LoginID;
                selectedDacStore.Active = checkBoxActive.Checked;

                bResult = dacStoreBS.Update(selectedDacStore);
            }
            // Kiem tra luu thanh cong khong de load lai du lieu
            if (bResult)
            {
                // Get data from database
                if (string.IsNullOrWhiteSpace(AgencyCode))
                {
                    dacStoreCollection = dacStoreBS.GetListStore();
                }
                else
                {
                    dacStoreCollection = dacStoreBS.GetListStore(AgencyCode);
                }
                AddObjectIntoBindingList(dacStoreCollection);
                CommonBS.SaveSuccessfully();
                ucDataButtonStore.DataMode = DataState.View;
                ucDataButtonStore.SetInsertFocus();
                EnableControls(false);
            }
            else CommonBS.SaveNotSuccessfully();

            return bResult;
        }
        private void SaveStore()
        {
            SaveData();
        }
        #endregion
        #region Buttons' Event
        private void ucDataButtonAgency_InsertHandler()
        {
            bdlDacStore.AddNew();
            //CommonCore.ClearTextBox(panelAgency);
            EnableControls(true);
            textBoxCode.Focus();
            //Set focus for DataGridView
            gridViewStore.FocusedRowHandle = gridViewStore.GetVisibleRowHandle(gridViewStore.RowCount - 1);
            if (!string.IsNullOrWhiteSpace(AgencyCode))
                gridLookUpEditAgencyCode.Enabled = false;
        }

        private void ucDataButtonAgency_SaveHandler()
        {
            // Neu nut buttonPaste duoc nhan bIsPastedData = true
            if (bIsPastedData)
            {
                int iContent = 0;
                // Thuc hien luu cac Row vua paste vao
                int gridViewAgencyRowCount = gridViewStore.RowCount;
                for (int i = 0; i < gridViewAgencyRowCount; i++)
                {
                    object valueCell = gridViewStore.GetRowCellValue(i, gridColumnID);
                    if (valueCell.ToString() == "-1")
                    {
                        // Set Focus Row for DataGridView
                        gridViewStore.FocusedRowHandle = gridViewStore.GetVisibleRowHandle(i);
                        //DacAgency agency = new DacAgency();
                        //agency = (DacAgency)gridViewAgency.GetRow(i);
                        //Save Pasted Data();
                        SaveCopiedData();
                        gridViewStore.SetRowCellValue(i, gridColumnID, 0);
                        iContent += 1;
                    }
                }
                // Lưu nhật ký
                CommonBO.Instance().TraceLogEvent("Save Store: " + iContent + " bản ghi từ excel", CommonBS.CurrentUser.LoginID);
                ucDataButtonStore.DataMode = DataState.View;
            }
            else
            {
                // Lưu nhật ký
                CommonBO.Instance().TraceLogEvent("Save Store: " + textBoxCode.Text + " - " + textBoxName.Text + " - "
                    + textBoxAddress.Text + " - " + gridLookUpEditProvince.EditValue, CommonBS.CurrentUser.LoginID);
                Common objCommon = new Common();
                objCommon.CurrentForm = this;
                objCommon.CurrentFormMethodInvoker = SaveStore;
                objCommon.App_ShowWaitForm(DataState.Insert);
            }
            bIsPastedData = false;
        }

        private void ucDataButtonAgency_EditHandler()
        {
            // Lưu nhật ký
            CommonBO.Instance().TraceLogEvent("Edit Store: " + textBoxCode.Text + " - " + textBoxName.Text + " - "
                    + textBoxAddress.Text + " - " + gridLookUpEditProvince.EditValue, CommonBS.CurrentUser.LoginID);
            // Kiem tra xem co du lieu nao khong
            if (gridViewStore.RowCount == 0) return;
            // Lay du lieu de sua
            selectedDacStore = GetSelectedStore(gridViewStore.GetFocusedRowCellValue(gridColumnCode).ToString());
            EnableControls(true);
            textBoxName.Focus();
            if (!string.IsNullOrWhiteSpace(AgencyCode))
                gridLookUpEditAgencyCode.Enabled = false;
        }

        private void ucDataButtonAgency_DeleteHandler()
        {
            // Kiem tra xem co du lieu nao khong
            if (gridViewStore.RowCount == 0)
            {
                return;
            }
            string ID = gridViewStore.GetRowCellValue(gridViewStore.FocusedRowHandle, gridColumnID).ToString();
            if (ID == "-1")
            {
                DevExpress.XtraGrid.Views.Grid.GridView view = gridControlStore.FocusedView as DevExpress.XtraGrid.Views.Grid.GridView;
                view.DeleteRow(view.FocusedRowHandle);
            }
            else
            {
                // Lay du lieu de xoa
                selectedDacStore = GetSelectedStore(gridViewStore.GetFocusedRowCellValue(gridColumnCode).ToString());
                // Kiem tra moi lien quan voi du lieu khac neu co
                if (dacStoreBS.Delete(selectedDacStore.Code, selectedDacStore.AgencyCode))
                {
                    // Lưu nhật ký
                    CommonBO.Instance().TraceLogEvent("Delete Store: " + selectedDacStore.Code + " - " + selectedDacStore.Name + " - "
                            + selectedDacStore.Address + " - " + selectedDacStore.ProvinceCode, CommonBS.CurrentUser.LoginID);
                    CommonBS.DeleteSuccessfully();
                    // Get data from database
                    if (string.IsNullOrWhiteSpace(AgencyCode))
                        dacStoreCollection = dacStoreBS.GetListStore();
                    else
                        dacStoreCollection = dacStoreBS.GetListStore(AgencyCode);
                    AddObjectIntoBindingList(dacStoreCollection);
                }
                else
                    CommonBS.DeleteNotSuccessfully();
            }
        }

        private void ucDataButtonAgency_CancelHandler()
        {
            EnableControls(false);
            if (ucDataButtonStore.DataMode == DataState.Insert)
            {
                if (gridViewStore.RowCount > 1)
                {
                    DevExpress.XtraGrid.Views.Grid.GridView view = gridControlStore.FocusedView as DevExpress.XtraGrid.Views.Grid.GridView;
                    view.DeleteRow(view.FocusedRowHandle);
                }
            }
            ucDataButtonStore.DataMode = DataState.View;
        }

        private void ucDataButtonAgency_CloseHandler()
        {
            //if (IsChangedData())
            //{
            //    if (CommonBS.ConfirmChangedData() == DialogResult.Yes)
            //    {
            //        if (SaveData() == false)
            //            return;
            //    }
            //}
            this.Close();
        }
        private void ucDataButtonAgency_ExcelHandler()
        {
            SaveFileDialog fileDialog = new SaveFileDialog();
            fileDialog.Filter = "Excel 2007-2016(*.xlsx)|*.xlsx";

            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                //gridViewAgency.ExportToXlsx(@"\khachhang.xlsx");
                gridViewStore.ExportToXlsx(fileDialog.FileName);
            }
        }
        #endregion

        private void buttonSearch_Click(object sender, EventArgs e)
        {
            string[] datas = Common.ClipBoardData.Split('\n');
            if (datas.Length < 1) return;
            foreach (string data in datas)
            {
                CopyToGridControl(data);
            }
            bIsPastedData = true;
            ucDataButtonStore.DataMode = DataState.Insert;
        }
        private void CopyToGridControl(string data)
        {
            if (data == string.Empty) return;
            string[] rowData = data.Split(new char[] { '\r', '\x09' });
            try
            {
                string sCode = rowData[1].ToString();
                // Kiem tra su ton tai cua ma KH
                if (Common.CheckExistCode(sCode, gridViewStore, gridColumnCode))
                {
                    MessageBox.Show("Mã " + sCode + " đã tồn tại!", "Thông báo");
                    return;
                }
                DacStore store = new DacStore();
                store.ID = -1;
                store.Code = sCode;
                store.Name = rowData[2];
                store.Address = rowData[3];
                store.ProvinceCode = rowData[4];
                store.ShopKeeper = rowData[5];
                store.PhoneNum = rowData[6];
                store.MobileNum = rowData[7];
                store.Email = rowData[8];
                store.AgencyCode = rowData[9];
                store.CreatedUser = CommonBS.CurrentUser.LoginID;
                try
                {
                    store.CreatedDate = DateTime.Parse(rowData[11]);
                }
                catch
                {
                    store.CreatedDate = DateTime.Now;
                }
                store.ModifiedDate = DateTime.Now;
                store.ModifiedUser = string.Empty;
                store.Description = rowData[14];
                store.Active = true;
                // Add row in to GridControl
                bdlDacStore.Add(store);
            }
            catch (IndexOutOfRangeException)
            {
                MessageBox.Show("Dữ liệu đã sao chép không đúng định dạng");
            }
        }

        private void btnImport_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog() { Filter = "Excel Workbook|*.xlsx|Excel Workbook 97-2003|*.xls", ValidateNames = true })
            {
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    FileStream stream;

                    try
                    {
                        stream = File.Open(ofd.FileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);

                        IExcelDataReader excelReader;
                        DataSet ds;

                        if (ofd.FilterIndex == 2)
                        {
                            excelReader = ExcelReaderFactory.CreateBinaryReader(stream);
                        }
                        else
                        {
                            excelReader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                        }

                        ds = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                        {
                            ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                            {
                                UseHeaderRow = true
                            }
                        });
                        stream.Close();
                        if (ds.Tables[0] == null)
                            return;
                        DataTable tblResult = ds.Tables[0];
                        foreach (DataRow row in tblResult.Rows)
                        {
                            if (Common.CheckExistCode(row[1].ToString(), gridViewStore, gridColumnCode))
                            {
                                MessageBox.Show("Mã " + row[1].ToString() + " đã tồn tại!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }
                        foreach (DataRow row in tblResult.Rows)
                        {
                            DacStore store = new DacStore();
                            store.ID = -1;
                            store.Code = row[1].ToString();
                            store.Name = row[2].ToString();
                            store.Address = row[3].ToString();
                            store.ProvinceCode = row[4].ToString();
                            if (store.ProvinceCode.Length == 1)
                                store.ProvinceCode = "0" + store.ProvinceCode;
                            store.ShopKeeper = row[5].ToString();
                            store.PhoneNum = row[6].ToString();
                            store.MobileNum = row[7].ToString();
                            store.Email = row[8].ToString();
                            store.AgencyCode = row[9].ToString();
                            store.CreatedUser = row[10] != null ? row[10].ToString() : CommonBS.CurrentUser.LoginID;
                            try
                            {
                                store.CreatedDate = DateTime.Parse(row[11].ToString());
                            }
                            catch
                            {
                                store.CreatedDate = DateTime.Now;
                            }
                            store.ModifiedDate = DateTime.Now;
                            store.ModifiedUser = CommonBS.CurrentUser.LoginID;
                            store.Description = row[14].ToString();
                            store.Active = true;
                            // Add row in to GridControl
                            bdlDacStore.Add(store);
                        }

                    }
                    catch (Exception)
                    {
                        MessageBox.Show("Đã có lỗi xảy ra, không thể hoàn thành thao tác!", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }
    }
}
